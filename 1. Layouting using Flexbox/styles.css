.container {
    max-width: 1200px;
    margin: auto auto;
}

.box {
    width: 50px;
    height: 50px;
    margin: 5px;
    background-color: #f2f2f2;
    border: 1px solid #ccc;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 24px;
}

.box.tall {
    height: 100px;
}

.box.wide {
    width: 100px;
}


.red{
    background-color: red;
}

.blue{
    background-color: blue;
}

.green{
    background-color: green;
}


/* TODO 1 */
.todo-1-container {
    display: flex; /* TODO 1.1.1 Set the display of this div to flex */
    flex-direction: row; /* TODO 1.1.2 Set the flex direction to row. Then set it to column. What's the difference? */
    /* Answer: The flex direction "row" arranges the flex items horizontally in a row, while "column" arranges them vertically in a column. */
    flex-wrap: wrap; /* TODO 1.1.3 Set the flex direction to row. Then enable flex wrap. What does wrap do? */
    /* Answer: Flex wrap allows the flex items to wrap onto multiple lines if there is not enough space in the container. */
    gap: 20px; /* Todo 1.1.4 Set the gap of the container to 10px. Now change it to 20px. What does gap do? */
    /* Answer: The gap property sets the spacing between the flex items. */
}

/* TODO 2 */
.todo-2-container{
    display: flex; /* TODO 1.2.1 Set the display to flex */
    flex-direction: row; /* TODO 1.2.2 Set the flex direction to row */
    justify-content: flex-start; /* TODO 1.2.2 Justify the content to start, then end, then center. Make sure to see how the position of the divs change */
    /* Answer: When the content is justified to start, the divs are aligned to the left. When justified to end, the divs are aligned to the right. When justified to center, the divs are centered horizontally. */
    align-items: flex-start; /* TODO 1.2.3 Align the items start, then end, then center. Make sure to see how the position of the divs change */
    /* Answer: When the items are aligned to start, the divs are aligned to the top. When aligned to end, the divs are aligned to the bottom. When aligned to center, the divs are centered vertically. */
    flex-direction: column; /* TODO 1.2.4 Set the flex direction to column and play around with justify-content and align-items */
}

/* TODO 3 */
.todo-3-container{
    display: flex; /* Todo 1.3.1 Set the display to flex */
    align-items: center; /* Todo 1.3.1 Set the display to flex and align items center */
}

/* Select the red box */
.todo-3-container .red{
    align-self: flex-start; /* Todo 1.3.2 Align this item to start. Try out the other possible values. What happens? */
    /* Answer: When align-self is set to start, the red box is aligned to the top of the container. When set to end, it is aligned to the bottom. When set to center, it is centered vertically. */
}

/* Select the green box */
.todo-3-container green{
    flex-grow: 1; /* Todo 1.3.3 Set flex grow to 1 */
}

/* Select the blue box */
.todo-3-container .blue{
    flex-grow: 2; /* Todo 1.3.4 Set flex grow to 2. Try out the other values. What happens? */
    /* Answer: When flex-grow is set to 2, the blue box grows twice as much as the other flex items. When set to 0, it does not grow at all. */
}
/* TODO 4 */
.todo-4-container{
    display: flex; /* Set the display to flex */
}

/* Select the red box */
.todo-4-container .red{
    margin-left: auto; /* Set margin left to auto */
}

/* Select the green box */
.todo-4-container .green{
    margin-right: auto; /* Set margin right to auto */
}

/* Select the blue box */
.todo-4-container .blue{
    order: 1; /* Set the order to 1. Try changing the order of the other divs. What does order do? */
    /* Answer: The order property specifies the order in which the flex items are displayed. By default, the order is 0. A higher order value will make the item appear later in the order. */
}




